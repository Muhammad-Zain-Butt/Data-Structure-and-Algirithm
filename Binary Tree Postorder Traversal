//145. Binary Tree Postorder Traversal
//Given the root of a binary tree, return the postorder traversal of its nodes' values.
/* Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]
Example 2:
Input: root = []
Output: []
Example 3:
Input: root = [1]
Output: [1]
Constraints:
The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100 */

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> postOrder;
        stack<TreeNode*> st;
        if(root == NULL) return postOrder;
        st.push(root);
        while(!st.empty()){
            TreeNode* top = st.top();
            st.pop();
            postOrder.push_back(top->val);
            if(top->left != NULL){
                st.push(top->left);
            }
            if(top->right != NULL){
                st.push(top->right);
            }
        }
        reverse(postOrder.begin(), postOrder.end());
        return postOrder;
    }
};
