//8. String to Integer (atoi)
//Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.
//The algorithm for myAtoi(string s) is as follows:
//1 Whitespace: Ignore any leading whitespace (" ").
//2 Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
//3 Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached.
//If no digits were read, then the result is 0.
//4 Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range.
//Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
//5 Return the integer as the final result.
/* Example 1:
Input: s = "42"
Output: 42
Explanation:
The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
Step 2: "42" (no characters read because there is neither a '-' nor '+')
Step 3: "42" ("42" is read in)
Example 2:
Input: s = " -042"
Output: -42
Explanation:
Step 1: "   -042" (leading whitespace is read and ignored)
Step 2: "   -042" ('-' is read, so the result should be negative)
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)
Example 3:
Input: s = "1337c0d3"
Output: 1337
Explanation:
Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
Step 3: "1337c0d3" ("1337" is read in; reading stops because the next character is a non-digit)
Constraints:
0 <= s.length <= 200
s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.  */

class Solution {
public:
    int myAtoi(string s) {
        int len = s.length(), i = 0, sign = 1;
        while(i<len && s[i] == ' ') i++;
        if(i == len) return 0;
        if(s[i] == '-'){
            sign = 0;
            i++;
        }
        else if(s[i] == '+') i++;
        long int out = 0;
        while(s[i] >= '0' && s[i] <= '9'){
            out = out*10;
            if(out <= INT_MIN || out >= INT_MAX){
                break;
            } 
            out = out+(s[i]-'0');
            i++;
        }
        if(sign == 0) out = -1 * out;
        if(out <= INT_MIN) return INT_MIN;
        if(out >= INT_MAX) return INT_MAX;
        return (int)out;
    }
};
