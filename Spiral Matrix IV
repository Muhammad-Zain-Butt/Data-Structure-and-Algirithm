//2326. Spiral Matrix IV
//You are given two integers m and n, which represent the dimensions of a matrix.
//You are also given the head of a linked list of integers.
//Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. 
//If there are remaining empty spaces, fill them with -1.
//Return the generated matrix.
/* Example 1:
Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.
Example 2:
Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.
Constraints:
1 <= m, n <= 105
1 <= m * n <= 105
The number of nodes in the list is in the range [1, m * n].
0 <= Node.val <= 1000 */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
        vector<vector<int>> matrix(m, vector<int>(n,-1));
        int L=0, R=n-1, T=0, B=m-1;
        while(L<=R && T<=B){
            //travering left to right
            for(int col=L; col<=R; col++){
                if(head){
                    matrix[L][col] = head->val;
                    head = head->next;
                }
            }
            T++;
            //traversing top to bottom
            for(int row=T; row<=B; row++){
                if(head){
                    matrix[row][R] = head->val;
                    head = head->next;
                }
            }
            R--;
            //travering right to left
            for(int col=R; T<=B && col>=L; col--){
                if(head){
                    matrix[B][col] = head->val;
                    head = head->next;
                }
            }
            B--;
            //traversing from bottom to top
            for(int row=B; L<=R && row>=T; row--){
                if(head){
                    matrix[row][L] = head->val;
                    head = head->next;
                }
            }
            L++;
        }
        return matrix;
    }
};


